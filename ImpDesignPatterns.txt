A few IMP Design Patterns:

1. The Bridge design pattern: is used to decouple an abstraction from its implementation, allowing them to vary independently. 
It’s particularly useful when you want to separate the abstraction (e.g., a higher-level interface) from its implementation so that both can be developed and evolved independently.

Scenario:
Imagine you’re designing a drawing application where you have different shapes (e.g., Circle, Square) that need to be rendered using different rendering methods (e.g., Vector, Raster).

2. The Adapter Design Pattern: is used to make two incompatible interfaces compatible. 
In PHP, this can be particularly useful when integrating with third-party libraries or legacy code.

Scenario:
Imagine you have a Logger class that logs messages in a certain format. 
You need to integrate a new logging system (NewLogger), but its interface is different from what your existing codebase expects.

3. The Façade design pattern: provides a simplified interface to a complex subsystem.
It is often used when a system is very complex or difficult to understand, and the goal is to provide a simple interface that makes the system easier to use.

Benefits:
Simplified Interface: The façade provides a simple and easy-to-use interface, hiding the complexities of the underlying system.
Reduced Coupling: The client is not tightly coupled with the complex subsystems, which can be beneficial for maintenance and scaling.
Improved Readability: The code is more readable and easier to understand.

When to Use:
To provide a simple interface to a complex system.
To reduce dependencies between the client and the subsystems.
To make a system easier to use and understand.

4. The Repository Design Pattern: is a popular architectural pattern used to separate the logic that retrieves data from a data source from the business logic.
It provides an abstraction over the data layer, making it easier to manage and test. Here’s a simple example of how to implement the Repository Design Pattern in PHP.

Benefits:
Separation of Concerns: It separates the data access logic from the business logic, making the code cleaner and easier to manage.
Easier Testing: By abstracting the data layer, it becomes easier to mock the repository for unit tests.
Flexibility: The repository pattern allows you to change the data source (e.g., from a database to an API) without affecting the rest of the application.

5. Domain-Driven Design (DDD): is an approach to software development that emphasizes collaboration between technical and domain experts to model complex software.
DDD focuses on understanding the core domain and building a shared language and model that reflects that understanding.
In PHP, you can implement DDD by following its key building blocks, such as entities, value objects, aggregates, repositories, services, and factories.

Benefits:
It helps in structuring your application by emphasizing domain logic and creating a shared understanding between developers and domain experts.
The separation of concerns makes the application more maintainable and flexible to changes in the domain logic.

6. Test-driven development (TDD): is a software development process in which you write tests for a piece of functionality before implementing the actual code.
It typically follows these steps:

Write a Test: Write a test that defines a function or improvements of a function, which should fail initially because the functionality isn't implemented yet.
Run the Test: Ensure the test fails to confirm that the functionality is not yet present.
Write the Code: Implement the code that makes the test pass.
Run the Test: Run all tests again to ensure the new code passes the test.
Refactor the Code: Improve the code while keeping the test green (passing).
Repeat: Continue this cycle for each new functionality.

Benefits:
TDD helps catch bugs early and encourages you to think about the design and requirements of your code before implementation.

7. Behavioral design patterns: are concerned with the interaction and responsibility between objects.
They help in defining how objects interact in a way that increases flexibility in carrying out communication.

Benefits:
Behavioral design patterns can be implemented in PHP to manage the communication and interaction between objects effectively.
Each pattern serves a specific purpose and can be applied based on the problem requirements.

8. The EventBus design pattern: is a messaging system used to decouple components in an application, 
allowing different parts of a program to communicate with each other without being tightly coupled.
It's often used to implement a publish-subscribe model where publishers emit events, and subscribers listen for those events and react accordingly.

9. The Decorator design pattern: is a structural pattern that allows behavior to be added to individual objects, either statically or dynamically, 
without affecting the behavior of other objects from the same class. It is often used to adhere to the Single Responsibility Principle as 
it allows functionality to be divided between classes with unique areas of concern.

Benefits:
This pattern is useful for adding functionalities dynamically and reducing the need for a large number of subclasses to achieve different combinations of behavior.

10. The Strategy Design Pattern: is a behavioral design pattern that allows you to define a family of algorithms, encapsulate each one of them, and make them interchangeable.
This pattern is useful when you have different variations of an algorithm that can be used interchangeably. By using the Strategy Pattern, you can make your code more 
flexible and easier to extend.

Benefits:
It allows adding new methods easily without modifying existing code, adhering to the Open/Closed Principle.

11. The Singleton design pattern: is a creational pattern that ensures a class has only one instance and provides a global point of access to that instance. 
This is particularly useful when exactly one object is needed to coordinate actions across the system, such as a database connection or a configuration manager.

Usage:
To get the singleton instance, call the static method getInstance(). This will always return the same instance, ensuring that there is only one object.
This pattern is useful when managing shared resources such as configuration settings, logging, or database connections, 
where having multiple instances could lead to inconsistent states or resource wastage.

Sample code:
<?php
class Singleton {
    // Hold the class instance.
    private static $instance = null;

    // The constructor is private to prevent initiation with outer code.
    private function __construct() {
        // Your initialization code here
        echo "Singleton instance created\n";
    }

    // The object is created from within the class itself only if the class has no instance.
    public static function getInstance() {
        if (self::$instance == null) {
            self::$instance = new Singleton();
        }
        return self::$instance;
    }

    // Prevent cloning of the instance
    private function __clone() {}
    // Prevent unserializing of the instance
    private function __wakeup() {}
}

// Usage
$instance1 = Singleton::getInstance();
$instance2 = Singleton::getInstance();
if ($instance1 === $instance2) {
    echo "Both instances are the same\n";
}
?>

12. The Factory Design Pattern: is a creational pattern that provides an interface for creating objects in a superclass but allows subclasses to alter the type of objects 
that will be created. It is particularly useful when you have a superclass with multiple subclasses and you need to instantiate one of the subclasses based on some input or configuration.

Scenario:
There is a Pizza Factory and have a different types of pizzas; we want to create a pizza factory that can produce various kinds of pizzas based on the given type.

Benefits:
This pattern helps in creating objects without having to specify the exact class of object that will be created, thus making the code more flexible and easier to extend.
